Connecting css in flask
<link rel="stylesheet" href="{{url_for("static", filename="css/style.css")}}" />

For production server 
pip install waitress 

app = Flask(__name__)
app.run(host="0.0.0.0", port=8000)

from waitress import serve
serve(app, host="0.0.0.0", port=8000)

city = request.form["city"]
city = request.args.get("city")


if weather_data:
    return render_template(
        "weather.html",
        title=weather_data["name"].capitalize(),
        status=weather_data["weather"][0]["description"],
        temp=weather_data["main"]["temp"],
        feels_like=weather_data["main"]["feels_like"],
    )
else:
    error_message = f"Could not retrieve weather for '{city}'. Please check the city name and try again."
    return render_template("error.html", error_message=error_message)



-------------------------------------------------------------------------------------------------------------------------------------



from dotenv import load_dotenv
from pprint import pprint
import requests
import os
import json

load_dotenv()

api_key = os.getenv("API_KEY")


def get_current_weather(city="Yangon"):
    request_url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric"

    response = requests.get(request_url)

    if response.status_code == 200:
        weather_data = response.json()
        return weather_data
    else:
        print(
            f"Error: Unable to get weather data for {city}. HTTP Status code: {response.status_code}"
        )
        return None


if __name__ == "__main__":
    print("\n*************** Get Current Weather Conditions ***************\n")

    city = input("\nPlease enter a city : ")

    weather_data = get_current_weather(city)

    if weather_data is not None:
        # print()
        # pprint(weather_data)
        # print()

        print()
        print(json.dumps(weather_data, indent=4, sort_keys=True))
        print()
    else:
        print(
            f"Could not retrieve weather for {city}. Please check the city name and try again."
        )



---------------------------------------------------------------------------------------------------------------------------------



from flask import Flask, render_template, request, redirect, url_for
from weather import get_current_weather
from waitress import serve

app = Flask(__name__)


@app.route("/")
@app.route("/index")
def index():
    # return "Hello World"
    return render_template("index.html")


@app.route("/weather")
def get_weather():
    # city = request.form["city"]
    city = request.args.get("city")

    if not city:
        return redirect(url_for("index"))

    weather_data = get_current_weather(city)

    if weather_data:
        return render_template(
            "weather.html",
            title=weather_data["name"],
            status=weather_data["weather"][0]["description"].title(),
            temp=f"{weather_data['main']['temp']:.1f}",
            feels_like=f"{weather_data['main']['feels_like']:.1f}",
        )
    else:
        error_message = f"Could not retrieve weather for '{city}'. Please check the city name and try again."
        return render_template("error.html", error_message=error_message)


@app.route("/about")
def about():
    return "This is About Page"


if __name__ == "__main__":
    # app.run(host="0.0.0.0", port=8000)
    serve(app, host="0.0.0.0", port=8000)



-------------------------------------------------------------------------------------------------------------------------------



